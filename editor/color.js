/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Color", [], factory);
	else if(typeof exports === 'object')
		exports["Color"] = factory();
	else
		root["Color"] = factory();
})(typeof self !== 'undefined' ? self : this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports) => {

eval("{\n// -----------------------------------------------------------------------------\n// Types\n// -----------------------------------------------------------------------------\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ColorUtils = void 0;\n// -----------------------------------------------------------------------------\n// Type guards\n// -----------------------------------------------------------------------------\nfunction isRGBAColor(color) {\n    return (color &&\n        typeof color === 'object' &&\n        typeof color.r === 'number' &&\n        typeof color.g === 'number' &&\n        typeof color.b === 'number' &&\n        (color.a === undefined || typeof color.a === 'number'));\n}\nfunction isHSLAColor(color) {\n    return (color &&\n        typeof color === 'object' &&\n        typeof color.h === 'number' &&\n        typeof color.s === 'number' &&\n        typeof color.l === 'number' &&\n        (color.a === undefined || typeof color.a === 'number'));\n}\n// -----------------------------------------------------------------------------\n// Colour names and corresponding hex values\n// -----------------------------------------------------------------------------\nconst COLOR_NAMES = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '0ff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000',\n    blanchedalmond: 'ffebcd',\n    blue: '00f',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '0ff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgreen: '006400',\n    darkgrey: 'a9a9a9',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkslategrey: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1e90ff',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'f0f',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    grey: '808080',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgray: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightgrey: 'd3d3d3',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslategray: '789',\n    lightslategrey: '789',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '0f0',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'f0f',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370db',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'db7093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '639',\n    red: 'f00',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    wheat: 'f5deb3',\n    white: 'fff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ff0',\n    yellowgreen: '9acd32',\n    transparent: '00000000',\n};\n// -----------------------------------------------------------------------------\n// Utility functions\n// -----------------------------------------------------------------------------\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction round(value, decimals = 0) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n}\n// -----------------------------------------------------------------------------\n// Conversion functions\n// -----------------------------------------------------------------------------\nfunction hslaToRGBA(hsla) {\n    const h = hsla.h / 360;\n    const s = hsla.s / 100;\n    const l = hsla.l / 100;\n    const a = hsla.a !== undefined ? hsla.a : 1;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        const hue2rgb = (p, q, t) => {\n            if (t < 0)\n                t += 1;\n            if (t > 1)\n                t -= 1;\n            if (t < 1 / 6)\n                return p + (q - p) * 6 * t;\n            if (t < 1 / 2)\n                return q;\n            if (t < 2 / 3)\n                return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255),\n        a,\n    };\n}\nfunction rgbaToHSLA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const a = rgba.a !== undefined ? rgba.a : 1;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h, s;\n    const l = (max + min) / 2;\n    if (max === min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                h = 0;\n        }\n        h /= 6;\n    }\n    return {\n        h: Math.round(h * 360),\n        s: Math.round(s * 100),\n        l: Math.round(l * 100),\n        a,\n    };\n}\nfunction parseHex(hex) {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    // Handle 3-digit hex\n    if (hex.length === 3) {\n        hex = hex\n            .split('')\n            .map(char => char + char)\n            .join('');\n    }\n    // Handle 4-digit hex (with alpha)\n    if (hex.length === 4) {\n        hex = hex\n            .split('')\n            .map(char => char + char)\n            .join('');\n    }\n    // Parse 6-digit or 8-digit hex\n    if (hex.length === 6) {\n        let r = parseInt(hex.slice(0, 2), 16);\n        let g = parseInt(hex.slice(2, 4), 16);\n        let b = parseInt(hex.slice(4, 6), 16);\n        if (Number.isNaN(r))\n            r = 0;\n        if (Number.isNaN(g))\n            g = 0;\n        if (Number.isNaN(b))\n            b = 0;\n        return { r, g, b, a: 1 };\n    }\n    if (hex.length === 8) {\n        let r = parseInt(hex.slice(0, 2), 16);\n        let g = parseInt(hex.slice(2, 4), 16);\n        let b = parseInt(hex.slice(4, 6), 16);\n        let a = parseInt(hex.slice(6, 8), 16) / 255;\n        if (Number.isNaN(r))\n            r = 0;\n        if (Number.isNaN(g))\n            g = 0;\n        if (Number.isNaN(b))\n            b = 0;\n        if (Number.isNaN(a))\n            a = 0;\n        return { r, g, b, a: round(a, 2) };\n    }\n    return null;\n}\nfunction parseRgb(str) {\n    // Match rgb(r, g, b) or rgba(r, g, b, a)\n    const rgbMatch = str.match(/rgba?\\(\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,)]+)(?:\\s*,\\s*([^)]+))?\\s*\\)/);\n    if (!rgbMatch)\n        return null;\n    const parseValue = (value, isAlpha = false) => {\n        value = value.trim();\n        if (value.endsWith('%')) {\n            const percent = parseFloat(value.slice(0, -1));\n            return isAlpha ? percent / 100 : (percent / 100) * 255;\n        }\n        return parseFloat(value);\n    };\n    const r = clamp(Math.round(parseValue(rgbMatch[1])), 0, 255);\n    const g = clamp(Math.round(parseValue(rgbMatch[2])), 0, 255);\n    const b = clamp(Math.round(parseValue(rgbMatch[3])), 0, 255);\n    const a = rgbMatch[4] ? clamp(parseValue(rgbMatch[4], true), 0, 1) : 1;\n    return { r, g, b, a: round(a, 2) };\n}\nfunction parseHsl(str) {\n    // Match hsl(h, s%, l%) or hsla(h, s%, l%, a)\n    const hslMatch = str.match(/hsla?\\(\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,)]+)(?:\\s*,\\s*([^)]+))?\\s*\\)/);\n    if (!hslMatch)\n        return null;\n    const h = parseFloat(hslMatch[1].trim()) % 360;\n    const s = parseFloat(hslMatch[2].trim().replace('%', ''));\n    const l = parseFloat(hslMatch[3].trim().replace('%', ''));\n    const a = hslMatch[4] ? clamp(parseFloat(hslMatch[4].trim()), 0, 1) : 1;\n    const hsla = { h, s, l, a: round(a, 2) };\n    return hslaToRGBA(hsla);\n}\nfunction stringToRGBA(colorString) {\n    const str = colorString.trim().toLowerCase();\n    // Check if it's a named color\n    if (COLOR_NAMES[str]) {\n        const hex = COLOR_NAMES[str];\n        const parsed = parseHex(hex);\n        if (parsed)\n            return parsed;\n    }\n    // Try to parse as hex\n    if (str.startsWith('#')) {\n        const hex = parseHex(str);\n        if (hex)\n            return hex;\n    }\n    // Try to parse as rgb/rgba\n    if (str.startsWith('rgb')) {\n        const rgb = parseRgb(str);\n        if (rgb)\n            return rgb;\n    }\n    // Try to parse as hsl/hsla\n    if (str.startsWith('hsl')) {\n        const hsl = parseHsl(str);\n        if (hsl)\n            return hsl;\n    }\n    // Try to parse as hex without # (fallback for hex strings without prefix)\n    const hex = parseHex(str);\n    if (hex)\n        return hex;\n    // Default to black if parsing fails\n    return { r: 0, g: 0, b: 0, a: 1 };\n}\nfunction stringToHSLA(colorString) {\n    const rgba = stringToRGBA(colorString);\n    return rgbaToHSLA(rgba);\n}\nfunction rgbaToString(rgba, options) {\n    const { mode = 'rgb', alpha } = options || {};\n    const a = rgba.a !== undefined ? rgba.a : 1;\n    if (mode === 'hex') {\n        const toHex = (n) => Math.round(n).toString(16).padStart(2, '0');\n        const hex = `#${toHex(rgba.r)}${toHex(rgba.g)}${toHex(rgba.b)}`;\n        if (alpha === true || (alpha === undefined && a < 1)) {\n            return hex + toHex(a * 255);\n        }\n        return hex;\n    }\n    // RGB mode\n    if (alpha === true || (alpha === undefined && a < 1)) {\n        return `rgba(${Math.round(rgba.r)}, ${Math.round(rgba.g)}, ${Math.round(rgba.b)}, ${a})`;\n    }\n    return `rgb(${Math.round(rgba.r)}, ${Math.round(rgba.g)}, ${Math.round(rgba.b)})`;\n}\nfunction hslaToString(hsla, options) {\n    const { mode = 'hsl', alpha } = options || {};\n    const a = hsla.a !== undefined ? hsla.a : 1;\n    if (mode === 'hex') {\n        // Convert to RGBA first, then to hex\n        const rgba = hslaToRGBA(hsla);\n        return rgbaToString(rgba, { mode: 'hex', alpha });\n    }\n    // HSL mode\n    if (alpha === true || (alpha === undefined && a < 1)) {\n        return `hsla(${Math.round(hsla.h)}, ${Math.round(hsla.s)}%, ${Math.round(hsla.l)}%, ${a})`;\n    }\n    return `hsl(${Math.round(hsla.h)}, ${Math.round(hsla.s)}%, ${Math.round(hsla.l)}%)`;\n}\n// -----------------------------------------------------------------------------\n// Color manipulation functions\n// -----------------------------------------------------------------------------\nfunction lighten(color, amount = 0.1) {\n    if (isHSLAColor(color)) {\n        // HSLAColor\n        const hsla = color;\n        return {\n            ...hsla,\n            l: clamp(hsla.l + amount * 100, 0, 100),\n        };\n    }\n    if (isRGBAColor(color)) {\n        // RGBAColor - convert to HSLA, lighten, convert back\n        const rgba = color;\n        const hsla = rgbaToHSLA(rgba);\n        const lightened = lighten(hsla, amount);\n        return hslaToRGBA(lightened);\n    }\n    return color;\n}\nfunction darken(color, amount = 0.1) {\n    return lighten(color, -amount);\n}\nfunction saturate(color, amount = 0.1) {\n    if (isHSLAColor(color)) {\n        // HSLAColor\n        const hsla = color;\n        return {\n            ...hsla,\n            s: clamp(hsla.s + amount * 100, 0, 100),\n        };\n    }\n    if (isRGBAColor(color)) {\n        // RGBAColor - convert to HSLA, saturate, convert back\n        const rgba = color;\n        const hsla = rgbaToHSLA(rgba);\n        const saturated = saturate(hsla, amount);\n        return hslaToRGBA(saturated);\n    }\n    return color;\n}\nfunction desaturate(color, amount = 0.1) {\n    return saturate(color, -amount);\n}\nfunction fadeIn(color, amount = 0.1) {\n    const currentAlpha = color.a !== undefined ? color.a : 1;\n    return {\n        ...color,\n        a: clamp(currentAlpha + amount, 0, 1),\n    };\n}\nfunction fadeOut(color, amount = 0.1) {\n    return fadeIn(color, -amount);\n}\nfunction invert(color) {\n    if (isHSLAColor(color)) {\n        // HSLAColor - convert to RGBA, invert, convert back\n        const hsla = color;\n        const rgba = hslaToRGBA(hsla);\n        const inverted = invert(rgba);\n        return rgbaToHSLA(inverted);\n    }\n    if (isRGBAColor(color)) {\n        // RGBAColor\n        const rgba = color;\n        return {\n            ...rgba,\n            r: 255 - rgba.r,\n            g: 255 - rgba.g,\n            b: 255 - rgba.b,\n        };\n    }\n    return color;\n}\nfunction blend(color1, color2, ratio = 0.5) {\n    var _a, _b, _c, _d;\n    const r = clamp(ratio, 0, 1);\n    const invR = 1 - r;\n    if (isHSLAColor(color1) && isHSLAColor(color2)) {\n        // Both HSLAColor\n        const hsla1 = color1;\n        const hsla2 = color2;\n        return {\n            h: Math.round(hsla1.h * invR + hsla2.h * r),\n            s: Math.round(hsla1.s * invR + hsla2.s * r),\n            l: Math.round(hsla1.l * invR + hsla2.l * r),\n            a: round(((_a = hsla1.a) !== null && _a !== void 0 ? _a : 1) * invR + ((_b = hsla2.a) !== null && _b !== void 0 ? _b : 1) * r, 2),\n        };\n    }\n    if (isRGBAColor(color1) && isRGBAColor(color2)) {\n        // Both RGBAColor\n        const rgba1 = color1;\n        const rgba2 = color2;\n        return {\n            r: Math.round(rgba1.r * invR + rgba2.r * r),\n            g: Math.round(rgba1.g * invR + rgba2.g * r),\n            b: Math.round(rgba1.b * invR + rgba2.b * r),\n            a: round(((_c = rgba1.a) !== null && _c !== void 0 ? _c : 1) * invR + ((_d = rgba2.a) !== null && _d !== void 0 ? _d : 1) * r, 2),\n        };\n    }\n    // If types don't match, return the first color\n    return color1;\n}\nexports.ColorUtils = {\n    // String parsing functions\n    stringToRGBA,\n    stringToHSLA,\n    // Color conversion functions\n    rgbaToHSLA,\n    hslaToRGBA,\n    // Color-to-string functions\n    rgbaToString,\n    hslaToString,\n    // Color manipulation functions\n    lighten,\n    darken,\n    saturate,\n    desaturate,\n    fadeIn,\n    fadeOut,\n    invert,\n    blend,\n};\n\n\n//# sourceURL=webpack://Color/./index.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.ts"](0,__webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});